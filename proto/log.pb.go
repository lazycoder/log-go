// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"f1,omitempty"`
	Time                 int64    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty" bson:"f2,omitempty"`
	Level                int64    `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty" bson:"f3,omitempty"`
	Text                 string   `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty" bson:"f4,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogReq) Reset()         { *m = LogReq{} }
func (m *LogReq) String() string { return proto.CompactTextString(m) }
func (*LogReq) ProtoMessage()    {}
func (*LogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_log_844eb147888595bf, []int{0}
}
func (m *LogReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogReq.Unmarshal(m, b)
}
func (m *LogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogReq.Marshal(b, m, deterministic)
}
func (dst *LogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogReq.Merge(dst, src)
}
func (m *LogReq) XXX_Size() int {
	return xxx_messageInfo_LogReq.Size(m)
}
func (m *LogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LogReq.DiscardUnknown(m)
}

var xxx_messageInfo_LogReq proto.InternalMessageInfo

func (m *LogReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LogReq) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LogReq) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *LogReq) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type LogRep struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRep) Reset()         { *m = LogRep{} }
func (m *LogRep) String() string { return proto.CompactTextString(m) }
func (*LogRep) ProtoMessage()    {}
func (*LogRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_log_844eb147888595bf, []int{1}
}
func (m *LogRep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRep.Unmarshal(m, b)
}
func (m *LogRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRep.Marshal(b, m, deterministic)
}
func (dst *LogRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRep.Merge(dst, src)
}
func (m *LogRep) XXX_Size() int {
	return xxx_messageInfo_LogRep.Size(m)
}
func (m *LogRep) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRep.DiscardUnknown(m)
}

var xxx_messageInfo_LogRep proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LogReq)(nil), "proto.LogReq")
	proto.RegisterType((*LogRep)(nil), "proto.LogRep")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogClient interface {
	Write(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*LogRep, error)
}

type logClient struct {
	cc *grpc.ClientConn
}

func NewLogClient(cc *grpc.ClientConn) LogClient {
	return &logClient{cc}
}

func (c *logClient) Write(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*LogRep, error) {
	out := new(LogRep)
	err := c.cc.Invoke(ctx, "/proto.Log/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServer is the server API for Log service.
type LogServer interface {
	Write(context.Context, *LogReq) (*LogRep, error)
}

func RegisterLogServer(s *grpc.Server, srv LogServer) {
	s.RegisterService(&_Log_serviceDesc, srv)
}

func _Log_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Log/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Write(ctx, req.(*LogReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Log_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _Log_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log.proto",
}

func init() { proto.RegisterFile("log.proto", fileDescriptor_log_844eb147888595bf) }

var fileDescriptor_log_844eb147888595bf = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0xc9, 0x4f, 0xd7,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x51, 0x5c, 0x6c, 0x3e, 0xf9, 0xe9,
	0x41, 0xa9, 0x85, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x60, 0x36, 0x48, 0xac, 0x24, 0x33, 0x37, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0x39,
	0x08, 0xcc, 0x16, 0x12, 0xe1, 0x62, 0xcd, 0x49, 0x2d, 0x4b, 0xcd, 0x91, 0x60, 0x06, 0x0b, 0x42,
	0x38, 0x60, 0x95, 0xa9, 0x15, 0x25, 0x12, 0x2c, 0x10, 0xdd, 0x20, 0xb6, 0x12, 0x07, 0xd4, 0xec,
	0x02, 0x23, 0x3d, 0x2e, 0x66, 0x9f, 0xfc, 0x74, 0x21, 0x75, 0x2e, 0xd6, 0xf0, 0xa2, 0xcc, 0x92,
	0x54, 0x21, 0x5e, 0x88, 0x23, 0xf4, 0x20, 0x56, 0x4b, 0xa1, 0x70, 0x0b, 0x94, 0x18, 0x92, 0xd8,
	0xc0, 0x7c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x7c, 0x8c, 0x5a, 0xb0, 0x00, 0x00,
	0x00,
}
